# frozen_string_literal: true

require_relative './lib/string'

namespace :g do
  desc 'generate a command'
  task :command, [:command_name] do |_task, args|
    command_name = add_extension_to_file "#{args[:command_name]}_command"
    path_to_directory = File.join('app', 'commands')
    full_name = File.join(path_to_directory, command_name)

    create_path_to_file_and_file(full_name)

    file_name = "#{args[:command_name].split('/').last.capitalize}_Command"
    write_command_template_to_file(full_name, file_name)
  end

  desc 'generate an action'
  task :action, [:action_name] do |_task, args|
    action_name = add_extension_to_file "#{args[:action_name]}_action"
    path_to_directory = File.join('app', 'commands')
    full_name = File.join(path_to_directory, action_name)

    create_path_to_file_and_file(full_name)

    file_name = "#{args[:action_name].split('/').last.capitalize}_Action"
    write_command_template_to_file(full_name, file_name)
  end

  def create_path_to_file_and_file(full_file_name)
    path = full_file_name.split('/').reject(&:empty?)[0...-1]
    create_directory path
    touch full_file_name
  end

  desc 'generate a migration'
  task :migration, [:migration_name] do |_task, args|
    migration = args[:migration_name]
    path_to_migrations = File.join('app', 'db', 'migrations')
    create_directory path_to_migrations.split('/')

    existed_migrations = Dir["#{path_to_migrations}/*.rb"].sort
    last_migration = existed_migrations.last.split('/').last

    current_number_of_migration = if last_migration.nil?
                                    '001'
                                  else
                                    format('%03d',
                                           (last_migration.split('_').first.to_i + 1))
                                  end
    migration_name = File.join(path_to_migrations, [current_number_of_migration, "#{migration}.rb"].join('_'))
    touch migration_name

    write_migration_template_to_file migration_name
  end

  desc 'generate a model with migration'
  task :model, [:model_name] do |_task, args|
    migration = "create_#{args[:model_name]}"
    path_to_migrations = File.join('app', 'db', 'migrations')
    create_directory path_to_migrations.split('/')

    existed_migrations = Dir["#{path_to_migrations}/*.rb"].sort
    last_migration = existed_migrations.last.split('/').last

    current_number_of_migration = if last_migration.nil?
                                    '001'
                                  else
                                    format('%03d',
                                           (last_migration.split('_').first.to_i + 1))
                                  end
    migration_name = File.join(path_to_migrations, [current_number_of_migration, "#{migration}.rb"].join('_'))
    touch migration_name

    write_create_migration_template_to_file migration_name, args[:model_name]

    path_to_model = File.join('app', 'models')
    create_directory path_to_model.split('/')

    model_full_name = File.join(path_to_model, "#{args[:model_name]}.rb")
    touch model_full_name

    write_model_template_to_file model_full_name, args[:model_name].capitalize
  end

  def create_directory(path_to_directory)
    path_to_file = ''
    path_to_directory.each do |dir|
      path_to_file += "#{dir}/"
      mkdir path_to_file unless File.directory? path_to_file
    end
  end

  def write_command_template_to_file(full_name, file_name)
    str = <<~COMMAND
      class #{file_name.to_camel_case} < Command
        def call
          # pass
        end
      end
    COMMAND
    File.open(full_name, 'a') do |line|
      line.puts str
    end
  end

  def write_migration_template_to_file(full_name)
    str = <<~MIGRATION
      Sequel.migration do
        up do

        end

        down do

        end
      end
    MIGRATION

    File.open(full_name, 'a') do |line|
      line.puts str
    end
  end

  def write_create_migration_template_to_file(full_name, model_name)
    str = <<~MIGRATION
      Sequel.migration do
        up do
          create_table(:#{model_name}s) do
            primary_key :id

            DateTime :created_at
            DateTime :updated_at
          end
        end

        down do
          drop_table(:#{model_name}s)
        end
      end
    MIGRATION

    File.open(full_name, 'a') do |line|
      line.puts str
    end
  end

  def write_model_template_to_file(full_name, model_name)
    File.open(full_name, 'a') do |line|
      line.puts "class #{model_name.to_camel_case} < Sequel::Model(DB)\r  plugin :timestamps, update_on_create: true\rend"
    end
  end

  def add_extension_to_file(argument)
    argument.include?('.rb') ? argument : "#{argument}.rb"
  end
end
